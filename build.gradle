plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group 'com.atopion'
// TODO: Introduce variables for automatic build-number update.
version '0.2-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.apache.tomcat:tomcat-jdbc:9.0.10'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.mockito:mockito-core:2.7.22'
    testImplementation 'com.h2database:h2:1.4.194'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

build {

    doFirst {
        updateBuildNr()
    }
}

test {
    if(project.hasProperty('excludeTests')) enabled = false

    useJUnitPlatform()
}

task run(type:Exec) {
    dependsOn 'build'
    commandLine 'java', '-jar', 'build/libs/UGC-repository-' + version + '.jar'
}

task buildDocker(type:Exec) {
    dependsOn 'build'

    def dockerfilesrc = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows') ?
            '.\\src\\main\\docker\\Dockerfile' :
            './src/main/docker/Dockerfile'

    commandLine 'docker', 'build', '-t', 'ugc-api:latest', '-t', 'ugc-api:' + version, '-f', dockerfilesrc, '.'
}

task runDocker(type:Exec) {
    dependsOn 'buildDocker'

    commandLine 'docker-compose', 'down'
    commandLine 'docker-compose', 'up'
}


// Update build number
def updateBuildNr() {
    def versionPropertiesFile = file('version.properties')

    if (versionPropertiesFile.canRead()) {
        def Properties versionProperties = new Properties()

        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def code = versionProperties['BUILD_NR'].toInteger() + 1

        versionProperties['BUILD_NR']=code.toString()
        versionProperties.store(versionPropertiesFile.newWriter(), null)

        version = version + "-" + Integer.toString(code);
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}