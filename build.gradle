plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group 'com.atopion'
version '0.3-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.apache.tomcat:tomcat-jdbc:9.0.10'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.14'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.3.0.RELEASE'
    implementation 'io.micrometer:micrometer-core:latest.release'
    implementation 'io.micrometer:micrometer-registry-prometheus:latest.release'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:2.7.22'
    testImplementation 'com.h2database:h2:1.4.194'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task initializer {
    doFirst {
        updateBuildNr()
    }
    outputs.upToDateWhen {false}
}
tasks.matching { it.name != 'initializer' }.all { Task task -> task.dependsOn initializer }

task setupDockerFiles(type: Copy) {

    from 'src/main/docker/'
    include 'Dockerfile', 'docker-compose.yml'
    into 'build/tmp/docker'
    expand([
            jarFile: "UGC-repository-${-> readVersion()}.jar",
            PATH: '$PATH',
            dbRootPW: "\"${-> readInitValues().get("ROOT_PW")}\""
    ])
    outputs.upToDateWhen {false}
}

task setupDBFiles(type: Copy) {

    from 'db/'
    include 'db-clear.sh', 'db-demo-content.sh', 'db-init.sh'
    into 'build/tmp/db'
    expand([
            dbRootPW: "${-> readInitValues().get("ROOT_PW")}",
            SQLPassword: "${-> readInitValues().get("SQLPassword")}",
            RESTPassword: "${-> readInitValues().get("RESTPassword")}",
            USERPassword: "${-> readInitValues().get("USERPassword")}"
    ])
    outputs.upToDateWhen {false}
}

processResources {
    filesMatching('*.properties') {
        expand([
                KeyStorePassword: "${-> readInitValues().get("KeyStorePassword")}",
                SQLUsername: "${-> readInitValues().get("SQLUsername")}",
                SQLPassword: "${-> readInitValues().get("SQLPassword")}",

                RESTUsername: "${-> readInitValues().get("RESTUsername")}",
                RESTPassword: "${-> readInitValues().get("RESTPassword")}",

                USERUsername: "${-> readInitValues().get("USERUsername")}",
                USERPassword: "${-> readInitValues().get("USERPassword")}"
        ])
    }
}

processTestResources {
    filesMatching('*.properties') {
        expand([
                KeyStorePassword: "${-> readInitValues().get("KeyStorePassword")}",
                SQLUsername: "${-> readInitValues().get("SQLUsername")}",
                SQLPassword: "${-> readInitValues().get("SQLPassword")}",

                RESTUsername: "${-> readInitValues().get("RESTUsername")}",
                RESTPassword: "${-> readInitValues().get("RESTPassword")}",

                USERUsername: "${-> readInitValues().get("USERUsername")}",
                USERPassword: "${-> readInitValues().get("USERPassword")}"
        ])
    }
}

test {
    if(project.hasProperty('excludeTests')) enabled = false

    useJUnitPlatform()
}

task run(type:Exec) {
    dependsOn 'build'
    commandLine 'java', '-jar', "build/libs/UGC-repository-${-> version}.jar"
}

task buildDocker(type:Exec) {
    dependsOn 'setupDockerFiles', 'setupDBFiles', 'build'

    doFirst {
        System.out.println 'Build docker: ' + version
    }

    def dockerfilesrc = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows') ?
            '.\\build\\tmp\\docker\\Dockerfile' :
            './build/tmp/docker/Dockerfile'

    commandLine 'docker', 'build', '-t', 'ugc-api:latest', '-t', 'ugc-api:' + version, '-f', dockerfilesrc, '.'
}

task runDocker(type:Exec) {
    dependsOn 'buildDocker'

    commandLine 'docker-compose', '-f', 'build/tmp/docker/docker-compose.yml', 'down'
    commandLine 'docker-compose', '-f', 'build/tmp/docker/docker-compose.yml', 'up'
}

// Update build number
def updateBuildNr() {
    def versionPropertiesFile = file('version.properties')

    if (versionPropertiesFile.canRead()) {
        Properties versionProperties = new Properties()

        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def code = versionProperties['BUILD_NR'].toInteger() + 1
        versionProperties['BUILD_NR'] = code.toString()
        versionProperties.store(versionPropertiesFile.newWriter(), null)


        version = version + "-" + Integer.toString(code);
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}

def readInitValues() {
    def secretsPropertiesFile = file('secrets.properties')

    if (secretsPropertiesFile.canRead()) {
        Properties secretsProperties = new Properties()

        secretsProperties.load(new FileInputStream(secretsPropertiesFile))

        def valueMap = new LinkedHashMap<String, String>()

        valueMap.put("ROOT_PW", secretsProperties['ROOT_PW'].toString())
        valueMap.put("KeyStorePassword", secretsProperties['KeyStorePassword'].toString())

        valueMap.put("SQLUsername", secretsProperties['SQLUsername'].toString())
        valueMap.put("SQLPassword", secretsProperties['SQLPassword'].toString())
        valueMap.put("RESTUsername", secretsProperties['RESTUsername'].toString())
        valueMap.put("RESTPassword", secretsProperties['RESTPassword'].toString())
        valueMap.put("USERUsername", secretsProperties['USERUsername'].toString())
        valueMap.put("USERPassword", secretsProperties['USERPassword'].toString())

        return valueMap

    } else {
        throw new GradleException("Could not read secrets.properties!")
    }
}

def readVersion() {
    System.out.println 'Version: ' + version
    return version
}